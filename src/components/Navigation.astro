---
import Logo from "../assets/logo.svg";
import Burger from "../assets/burger.svg";
import { socialLinks } from "../social-links.ts";
---

<nav class="navigation" id="navigation">
  <a class="logo" href="#hero">
    <Logo />
  </a>
  <div class="links desktop">
    <div class="column">
      <a class="links__item" href="#about"> <span>О нас</span></a>
      <a class="links__item" href="#portfolio"> <span>Портфолио</span> </a>
    </div>
    <div class="divider"></div>
    <div class="column">
      <a class="links__item" href="#advantages"><span>Почему мы</span></a>
      <a class="links__item" href="#workflow"><span>Процесс</span></a>
    </div>
    <div class="divider"></div>
    <div class="column">
      <a class="links__item" href="#price"><span>Услуги</span></a>
      <a class="links__item" href="#reviews"><span>Отзывы</span></a>
    </div>
    <div class="divider"></div>
    <div class="column">
      <a class="links__item" href={socialLinks.inst} target="_blank"
        >Instagram</a
      >
      <a class="links__item" href={socialLinks.vk} target="_blank">Вконтакте</a>
    </div>
  </div>
  <div class="burger mobile">
    <Burger />
  </div>
</nav>

<style>
  .navigation {
    position: fixed;
    top: 0;
    left: 0;
    margin: calc(var(--section-margin) + 1em) var(--section-margin) 0
      var(--section-margin);
    z-index: 1000;
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 2.5em;
    width: calc(50vw - calc(var(--section-margin) * 2));
  }

  .logo {
    height: 4.125rem;
    width: 4.125rem;
    position: relative;
  }

  @media (max-width: 1025px) {
    .navigation {
      backdrop-filter: blur(4px);
      width: calc(100% - 40px);
      top: 0;
      left: 0;
      margin: 0;
      padding: 20px 20px 12px 20px;
      border-bottom: 1px solid var(--border-color);
    }

    .logo {
      height: 45px;
      width: 45px;
      position: relative;
    }
  }
  .links__item {
    color: var(--text-color-secondary);
    font-weight: 400;
    font-size: 0.75rem;
    font-family: var(--ff-main);
    text-decoration: none;
    font-style: normal;
    position: relative;
    width: 5rem;
  }
  .black {
    color: var(--text-color-primary);
  }
  .white {
    color: var(--text-color-white);
  }
  .column {
    display: flex;
    flex-direction: column;
    gap: 0.625em;
  }
  .divider {
    width: 1px;
    background-color: var(--border-color);
  }
  .links {
    gap: 2em;
  }
  .nav {
    display: none;
  }
  #navigation:has(:checked) {
    .nav {
      display: flex;
    }
  }
  .burger {
    width: 40px;
    height: 40px;
  }
</style>

<script lang="js">
  document.addEventListener("DOMContentLoaded", () => {
    const nav = document.getElementById("navigation");
    const sections = document.querySelectorAll("[data-nav-section]");
    const navLinks = document.querySelectorAll("#navigation a");

    // Определяем текущую секцию
    let currentSectionIndex = 1;

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // console.log(entry);

          if (entry.isIntersecting) {
            const index = parseInt(
              entry.target.getAttribute("data-section-index")
            );
            console.log(entry);

            const sectionId = entry.target.id; // Получаем ID секции

            currentSectionIndex = index;

            // Определяем чётность для стилизации навигации
            const isEven = index % 2 !== 0;

            console.log(isEven, index);

            nav.style.color = isEven ? "white" : "black";

            navLinks.forEach((link) => {
              // Обновляем классы цвета
              link.classList.remove("white", "black");
              link.classList.add(isEven ? "white" : "black");

              // Проверяем, соответствует ли ссылка текущей секции
              const targetId = link.getAttribute("href").slice(1);

              if (targetId === sectionId) {
                if (targetId !== "hero") {
                  link.classList.add("active");
                }

                // Обновляем хеш только если он не совпадает
                if (window.location.hash !== `#${sectionId}`) {
                  history.replaceState(null, null, `#${sectionId}`);
                }
              } else {
                link.classList.remove("active");
              }
            });
          }
        });
      },
      {
        threshold: 0.5,
        rootMargin: "0px",
      }
    );

    // Наблюдаем за всеми секциями
    sections.forEach((section) => {
      observer.observe(section);
    });

    // Плавная прокрутка + обновление хеша при клике
    navLinks.forEach((link) => {
      link.addEventListener("click", (e) => {
        const targetId = link.getAttribute("href");
        const targetSection = document.querySelector(targetId);
        // console.log(targetSection);
        // console.log(targetId);

        if (targetSection) {
          targetSection.scrollIntoView({
            behavior: "smooth",
          });
          // Прокручиваем
          // window.scrollTo({
          //   top: targetSection.offsetTop,
          //   behavior: "smooth",
          // });

          // Обновляем хеш
          history.replaceState(null, null, targetId);
        }
      });
    });

    // Дополнительно: при загрузке страницы, если есть хеш, проскролить к нему
    if (window.location.hash) {
      // console.log(window.location.hash);

      const targetSection = document.querySelector(window.location.hash);
      // console.log(targetSection);
      // console.log(targetSection.offsetTop);

      if (targetSection) {
        targetSection.scrollIntoView({
          behavior: "smooth",
        });
      }
    }
  });
</script>
